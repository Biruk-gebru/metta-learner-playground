name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: guide-metta/meTTa-docs-site/package-lock.json
    
    - name: Install dependencies
      run: |
        cd guide-metta/meTTa-docs-site
        npm ci
    
    - name: Type check
      run: |
        cd guide-metta/meTTa-docs-site
        npx tsc --noEmit
    
    - name: Build frontend
      run: |
        cd guide-metta/meTTa-docs-site
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:5000
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: guide-metta/meTTa-docs-site/.next

  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd guide-metta/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
    
    - name: Run backend tests
      run: |
        cd guide-metta/backend
        python3 -c "
        import app
        print('Backend imports successfully')
        "
    
    - name: Test backend endpoints
      run: |
        cd guide-metta/backend
        python -c "
        import requests
        import time
        import subprocess
        import sys
        
        # Start the Flask app in background
        process = subprocess.Popen(['python3', 'app.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Wait for server to start
        time.sleep(5)
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:5000/health', timeout=10)
            assert response.status_code == 200
            print('Health endpoint working')
            
            # Test queue status endpoint
            response = requests.get('http://localhost:5000/queue-status', timeout=10)
            assert response.status_code == 200
            print('Queue status endpoint working')
            
            # Test reset atomspace endpoint
            response = requests.post('http://localhost:5000/reset-atomspace', timeout=10)
            assert response.status_code == 200
            print('Reset atomspace endpoint working')
            
            print('All backend endpoints working correctly')
            
        finally:
            process.terminate()
            process.wait()
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: guide-metta/meTTa-docs-site/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd guide-metta/meTTa-docs-site
        npm ci
        cd ../../guide-metta/backend
        pip install -r requirements.txt
        pip install requests
    
    - name: Run integration tests
      run: |
        cd guide-metta/backend
        python -c "
        import subprocess
        import sys
        import time
        import requests
        
        # Start backend server
        backend_process = subprocess.Popen(['python3', 'app.py'], 
                                         stdout=subprocess.PIPE, 
                                         stderr=subprocess.PIPE)
        
        # Wait for backend to start
        time.sleep(5)
        
        try:
            # Test MeTTa code execution
            response = requests.post('http://localhost:5000/run-metta', 
                                   json={'code': '(+ 2 3)', 'language': 'metta', 'codeId': 'test1'}, 
                                   timeout=10)
            assert response.status_code == 200
            data = response.json()
            assert 'result' in data
            print('MeTTa code execution working')
            
            # Test Python code execution
            response = requests.post('http://localhost:5000/run-python', 
                                   json={'code': 'print(\"Hello, World!\")'}, 
                                   timeout=10)
            assert response.status_code == 200
            data = response.json()
            assert 'result' in data
            print('Python code execution working')
            
            print('Integration tests passed')
            
        finally:
            backend_process.terminate()
            backend_process.wait()
        "
